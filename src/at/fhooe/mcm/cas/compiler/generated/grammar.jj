options { STATIC = false; }
PARSER_BEGIN(Compiler)
package at.fhooe.mcm.cas.compiler.generated;

import at.fhooe.mcm.cas.compiler.treenode.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.List;

public class Compiler {
public Compiler() {}
	public static void evaluate(String _expr) throws ParseException {
		InputStream input = new ByteArrayInputStream(_expr.getBytes());
		Compiler compiler = new Compiler(input);
		TreeNode root = compiler.stmt();

		// testing only
		/*
		List<String> params = new ArrayList<>();
		params.add("temperature");
		params.add(null);
		params.add("temperature");
		params.add(null);
		root.setVariableParameters(params);
		*/
		
		try {
			Object result = root.calculate();
			System.out.println(result.toString());
		} catch (NodeError e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] _argv) {
		try {
		  	// testing only
			// Compiler.evaluate("distance (position, 44.1:56.1) > 10");
		} catch (Exception _e) {
			_e.printStackTrace();
		}
	}
}
PARSER_END(Compiler) 

SKIP : {" " | "\t" | "\n" | "\r" | "," }
TOKEN :
{
  < CONELEM: (["A"-"Z", "a"-"z"])+ > { System.out.print("CONTEXT-ELEMENT "); }
|  < DIST_BEGIN: ("distance (") > { System.out.print("DISTANCE-BEGIN "); }
|  < DIST_END: (")") > { System.out.print("DISTANCE END "); }
| < COMP: ["<",">","="] > { System.out.print("COMPARATOR "); }
| < NUM: (["0"-"9"])+ > { System.out.print("NUMBER "); }
| <DOUBLE: (["0"-"9"])+"."(["0"-"9"])+ > { System.out.print("DOUBLE "); }
| < LOGIC: ["&","|"] > { System.out.print("AND/OR "); }
| < POINT_DIVIDER: [":"] > { System.out.print("POINT-DIVIDER "); }
}

TreeNode stmt() : {
TreeNode nodeA = null;
TreeNode root = null;
} // stmt var
{
nodeA = valueComparison() (root = logicalComparison(nodeA))? { if(root == null) return nodeA; else return root; }
} // stmt nonterminal

TreeNode valueComparison() : {
TreeNode nodeA = null;
TreeNode root = null;
}
{
(nodeA = value_stmt() | nodeA = dist_stmt()) root = value_comparison(nodeA) { return root; }
}

TreeNode logicalComparison(TreeNode _nodeA) : {
TreeNode root = null;
TreeNode nodeB = null;
Token t;
} 
{
t = <LOGIC>
nodeB = valueComparison() {
root = new TreeNodeLogical(t.image);
root.setChilds(new TreeNode[]{ _nodeA, nodeB });
return root;
}
}

TreeNode value_comparison(TreeNode _nodeA) : {
TreeNode root = null;
TreeNode nodeB = null;
Token t;
} 
{
t = <COMP>
nodeB = value_stmt() {
root = new TreeNodeComparator(t.image);
root.setChilds(new TreeNode[]{ _nodeA, nodeB });
return root;
} 
}

TreeNode value_stmt() : { Token t; }
{
t = <CONELEM> { return new TreeNodeConstant(t.image); }
| t = <NUM> { return new TreeNodeContextVar(t.image); }
}

TreeNode dist_stmt() : {
  Token t;
  TreeNode nodePoint1;
  TreeNode nodePoint2;
  TreeNode nodeDist;
 }
{
<DIST_BEGIN>
nodePoint1 = distval_stmt()
nodePoint2 = distval_stmt()
<DIST_END> {
nodeDist = new TreeNodeDistance();
nodeDist.setChilds(new TreeNode[]{ nodePoint1, nodePoint2 });
return nodeDist;
}
}

TreeNode distval_stmt() : { Token t; Token t2; }
{
t = <CONELEM> { return new TreeNodePosition(t.image); }
| t = <DOUBLE> <POINT_DIVIDER> t2 = <DOUBLE> { return new TreeNodePoint(t.image, t2.image); }
}
