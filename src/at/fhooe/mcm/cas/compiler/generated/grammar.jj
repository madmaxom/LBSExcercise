options { STATIC = false; }
PARSER_BEGIN(Compiler)
package at.fhooe.mcm.cas.compiler.generated;

import at.fhooe.mcm.cas.compiler.treenode.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
public class Compiler {
public Compiler() {}
	public static void evaluate(String _expr) throws ParseException {
		InputStream input = new ByteArrayInputStream(_expr.getBytes());
		Compiler compiler = new Compiler(input);
		TreeNode root = compiler.stmt();
		root.setVariableParameters( new Object[] {  3 });
		try {
			Object result = root.calculate();
			System.out.println(result.toString());
		} catch (NodeError e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] _argv) {
		try {
			Compiler.evaluate("TEMPERATURE < 4");
		} catch (Exception _e) {
			_e.printStackTrace();
		}
	}
}
PARSER_END(Compiler) 

SKIP : {" " | "\t" | "\n" | "\r" | "," }
TOKEN :
{
  < CONELEM: (["A"-"Z"])+ > { System.out.print("CONTEXT-ELEMENT "); }
| < COMP: ["<",">","="] > { System.out.print("COMPARATOR "); }
| < NUM: (["0"-"9"])+ > { System.out.print("NUMBER "); }
}

TreeNode stmt() : {
TreeNode nodeA = null;
TreeNode root = null;
} // stmt var
{
nodeA = daytime_stmt() root = daytime_comparison(nodeA) { return root; }
} // stmt nonterminal
TreeNode daytime_comparison(TreeNode _nodeA) : {
TreeNode root = null;
TreeNode nodeB = null;
Token t;
} // daytime_comparison var
{
t = <COMP>
nodeB = daytime_stmt() {
root = new TreeNodeComparator(t.image);
root.setChilds(new TreeNode[]{ _nodeA, nodeB });
return root;
} // 1. path
} // daytime_comparison nonterminal
TreeNode daytime_stmt() : { Token t; }
{
t = <CONELEM> { return new TreeNodeConstant(t.image); }
| t = <NUM> { return new TreeNodeContextVar(t.image); }
}